
from matplotlib import pyplot as plt
import matplotlib
import math
from math import sqrt
#import incertitudes as inc
import numpy as np
from scipy.stats import linregress
import sys 
sys.path.insert(1, '/home/erdi/D_Uni/PEI/Ventilation_CO2/Experiences')

def readtuple(file): return tuple(map(float,file.readline().split()))
def readmilis(file): return (int(file.readline().strip())/(1000 * 60)) 
def readlist(file) : return list(map(float,file.readline().split()))

def transformToMinutes(seconds , minutes = 0, hours = 0):
    return (seconds / 60) + minutes + (hours * 60)

def transformToHours(seconds, minutes = 0, hours = 0):
    return (seconds / 3600) + (minutes/60) + (hours)

def milisToHours(milliseconds): return milliseconds /(1000 * 60 * 60)
def milisToMinutes(milliseconds): return milliseconds /(1000 * 60 )

def calculCO2SensorIncertitude(ppm):
    #incertitude +- 30 ppm + 3%
    return 30 + ((3*ppm) / 100)

def doneesPourGraphs(filename : str)-> list[list]:
    #returns une liste de liste [temps_billes, vitesse_billes, err_vitesse_billes]
    file = open(filename, 'r')
    readedlist = readlist(file)
    ppm, c, h, time= readedlist
    time = milisToHours(time)
    list_ppm = []
    times = []
    temperatures = []
    err_ppm = []
    
    while time < 0.5 and readedlist != []:
        ppm, celsius, h, time = readedlist
        time = milisToHours(time)
        readedlist = readlist(file)
        
    while time < 170*60 and readedlist != []:
        ppm, celsius, h, time = readedlist
        time //= 1000 
        print(time)
        list_ppm.append(ppm)
        times.append(time )
        readedlist = readlist(file)
    print(len(times), len(list_ppm))
    for i in range(20):
        print("====================")
    for p in list_ppm:
        print(p)
    #print(filename, "moyenne : ", (sum(list_ppm)/len(list_ppm)))
    return [list_ppm, times, temperatures, err_ppm]

filenames = ["PGRACH1.TXT","PGRACH2.TXT","PGRACH3.TXT"]
doneesPourGraphs(filenames[0])

"""
plt.rcParams["figure.figsize"] = [7.50, 3.50]
plt.rcParams["figure.autolayout"] = True

def f(x):
   return 768.170417 * np.exp(0.000149)

p, x, b, c = doneesPourGraphs(filenames[0])

linear_model=np.polyfit(x,p,1)
linear_model_fn=np.poly1d(linear_model)
x_s=np.arange(0,max(x)+0.25, 0.25)
plt.plot(x_s,linear_model_fn(x_s),color="green")


y_values = []
for x_val in x:
    y_values.append(f(x_val))
print(y_values)
plt.plot(x, y_values, color='red')
plt.show()
"""



#######################################################################
"""
import scipy.optimize as opt;
from math import log10, floor

def round_to(x, sig = 3):
    return round(x, sig -int(floor(log10(abs(x)))))

# This is the function we are trying to fit to the data.
def func(x, a, b, c):
     return a * np.exp(-b * x) + c

float_list_ppm, big_times, temperatures, err_ppm = doneesPourGraphs(filenames[1])
list_ppm = []
times = []
for f in float_list_ppm:
    list_ppm.append(int(f))
for t in big_times:
    times.append(int(1000*round_to(t)))
print(list_ppm)
print(times)


list_ppm = [1086, 1089, 1092, 1094, 1095, 1096, 1098, 1100, 1102, 1104, 1107, 1110, 1112, 1111, 1115, 1117, 1118, 1119, 1120, 1121]#, 1120, 1123, 1124, 1126, 1128, 1128, 1129, 1131, 1134, 1136, 1136, 1138, 1140, 1141, 1142, 1142, 1143, 1145, 1145, 1147, 1147, 1148, 1150, 1151, 1152, 1152, 1153, 1152, 1154, 1154, 1155, 1156, 1157, 1157, 1159, 1160, 1161, 1161, 1161, 1162, 1163, 1165, 1166, 1166, 1169, 1169, 1169, 1170, 1169, 1170, 1170, 1172, 1173, 1174, 1173, 1173, 1175, 1176, 1178, 1182, 1186, 1186, 1186, 1187, 1187, 1188, 1190, 1192, 1193, 1194, 1197, 1198, 1198, 1199, 1199, 1199, 1200, 1202, 1203, 1206, 1208, 1210, 1210, 1211, 1212, 1212, 1210, 1212, 1212, 1213, 1216, 1216, 1218, 1220, 1223, 1225, 1228, 1232, 1236, 1239, 1249, 1255, 1261, 1265, 1270, 1271, 1276, 1276, 1278, 1278, 1279, 1280, 1281, 1282, 1285, 1288, 1292, 1297, 1300, 1305, 1309, 1308, 1312, 1312, 1314, 1315, 1317, 1320, 1322, 1322, 1322, 1322, 1322, 1320, 1320, 1322, 1322, 1322, 1321, 1329, 1335, 1340, 1348, 1351, 1346, 1349, 1352, 1352, 1353, 1355, 1358, 1358, 1363, 1364, 1367, 1369, 1369, 1373, 1376, 1379, 1382, 1383, 1387, 1390, 1392, 1392, 1394, 1396, 1396, 1398, 1399, 1400, 1401, 1403, 1405, 1405, 1405, 1406, 1408, 1406, 1407, 1407, 1407, 1407, 1408, 1407, 1406, 1407, 1407, 1406, 1406, 1408, 1408, 1406, 1406, 1406, 1406, 1405, 1405, 1405, 1405, 1406, 1406, 1406, 1407, 1408, 1410, 1410, 1412, 1414, 1415, 1415, 1416, 1418, 1419, 1420, 1421, 1421, 1423, 1426, 1427, 1428, 1429, 1431, 1431, 1431, 1432, 1432, 1431, 1432, 1433, 1434, 1434, 1435, 1436, 1436, 1436, 1437, 1437, 1436, 1439, 1437, 1437, 1436, 1435, 1435, 1436, 1436, 1438, 1438, 1439, 1437, 1436, 1434, 1435, 1436, 1435, 1435, 1434, 1434, 1434, 1434, 1434, 1434, 1435, 1435, 1434, 1436, 1437, 1438, 1440, 1443, 1444, 1446, 1451, 1459, 1460, 1468, 1472, 1478, 1478, 1481, 1485, 1488, 1490, 1492, 1494, 1495, 1494, 1496, 1497, 1498, 1500, 1503, 1507, 1511, 1517, 1527, 1542, 1555, 1560, 1561, 1569, 1573, 1573, 1574, 1575, 1576, 1576, 1575, 1573, 1571, 1571, 1570, 1570, 1570, 1571, 1572, 1574, 1570, 1571, 1571, 1573, 1572, 1571, 1570, 1569, 1569, 1568, 1568, 1568, 1568, 1567, 1567, 1567, 1567, 1568, 1569, 1570, 1571, 1571, 1573, 1573, 1573, 1574, 1574, 1573, 1573, 1572, 1573, 1573, 1572, 1573, 1572, 1573, 1575, 1575, 1576, 1577, 1578, 1579, 1580, 1581, 1582, 1584, 1588, 1592, 1593, 1595, 1596, 1601, 1611, 1617, 1624, 1625, 1634, 1637, 1641, 1644, 1648, 1651, 1651, 1654, 1656, 1659, 1660, 1664, 1664, 1666, 1664, 1665, 1665, 1668, 1668, 1668, 1668, 1667, 1668, 1669, 1671, 1671, 1672, 1671, 1672, 1674, 1676, 1678, 1678, 1681, 1681, 1682, 1683, 1684, 1684, 1683, 1684, 1683, 1682, 1683, 1683, 1683, 1681, 1680, 1678, 1677, 1677, 1675, 1673, 1671, 1671, 1669, 1668, 1667, 1665, 1664, 1662, 1662, 1661, 1660, 1661, 1662, 1660, 1659, 1660, 1660, 1662, 1663, 1664, 1666, 1665, 1665, 1665, 1666, 1665, 1666, 1664, 1665, 1666, 1669, 1671, 1674, 1677, 1681, 1685, 1689, 1692, 1695, 1696, 1698, 1700, 1701, 1701, 1702, 1702, 1704, 1704, 1705, 1707, 1708, 1710, 1710, 1712, 1712, 1711, 1713, 1713, 1714, 1713, 1713, 1715, 1716, 1717, 1716, 1716, 1716, 1717, 1717, 1718, 1720, 1721, 1722, 1723, 1725, 1727, 1730, 1735, 1741, 1746, 1746, 1746, 1748, 1747, 1747, 1747, 1746, 1744, 1746, 1746, 1745, 1746, 1746, 1746, 1747, 1746, 1747, 1747, 1750, 1751, 1753, 1754]
times =    [503, 504, 506, 508, 510,      512, 513, 515, 517, 519,      521, 523, 524, 526, 528,      530, 532, 533, 535, 537]#, 539, 541, 543, 544, 546, 548, 550]#, 552, 553, 555, 557, 559, 561, 563, 564, 566, 568, 570, 572, 573, 575, 577, 579, 581, 583, 584, 586, 588, 590, 592, 593, 595, 597, 599, 601, 603, 604, 606, 608, 610, 612, 613, 615, 617, 619, 621, 623, 624, 626, 628, 630, 632, 633, 635, 637, 639, 641, 643, 644, 646, 648, 650, 652, 653, 655, 657, 659, 661, 663, 664, 666, 668, 670, 672, 674, 675, 677, 679, 681, 683, 684, 686, 688, 690, 692, 694, 695, 697, 699, 701, 703, 704, 706, 708, 710, 712, 714, 715, 717, 719, 721, 723, 724, 726, 728, 730, 732, 734, 735, 737, 739, 741, 743, 744, 746, 748, 750, 752, 754, 755, 757, 759, 761, 763, 764, 766, 768, 770, 772, 774, 775, 777, 779, 781, 783, 784, 786, 788, 790, 792, 794, 795, 797, 799, 801, 803, 804, 806, 808, 810, 812, 814, 815, 817, 819, 821, 823, 824, 826, 828, 830, 832, 834, 835, 837, 839, 841, 843, 844, 846, 848, 850, 852, 854, 855, 857, 859, 861, 863, 864, 866, 868, 870, 872, 874, 875, 877, 879, 881, 883, 885, 886, 888, 890, 892, 894, 895, 897, 899, 901, 903, 905, 906, 908, 910, 912, 914, 915, 917, 919, 921, 923, 925, 926, 928, 930, 932, 934, 935, 937, 939, 941, 943, 945, 946, 948, 950, 952, 954, 955, 957, 959, 961, 963, 965, 966, 968, 970, 972, 974, 975, 977, 979, 981, 983, 985, 986, 988, 990, 992, 994, 995, 997, 999, 1000, 1002, 1004, 1006, 1008, 1010, 1012, 1014, 1016, 1018, 1020, 1020, 1022, 1025, 1027, 1029, 1030, 1032, 1034, 1036, 1038, 1040, 1041, 1043, 1045, 1047, 1049, 1050, 1052, 1054, 1056, 1058, 1060, 1061, 1063, 1065, 1067, 1069, 1070, 1072, 1074, 1076, 1078, 1080, 1081, 1083, 1085, 1087, 1089, 1090, 1092, 1094, 1096, 1098, 1100, 1101, 1103, 1105, 1107, 1109, 1111, 1112, 1114, 1116, 1118, 1120, 1121, 1123, 1125, 1127, 1129, 1131, 1132, 1134, 1136, 1138, 1140, 1141, 1143, 1145, 1147, 1149, 1151, 1152, 1154, 1156, 1158, 1160, 1161, 1163, 1165, 1167, 1169, 1171, 1172, 1174, 1176, 1178, 1180, 1181, 1183, 1185, 1187, 1189, 1191, 1192, 1194, 1196, 1198, 1200, 1201, 1203, 1205, 1207, 1209, 1211, 1212, 1214, 1216, 1218, 1220, 1221, 1223, 1225, 1227, 1229, 1231, 1232, 1234, 1236, 1238, 1240, 1241, 1243, 1245, 1247, 1249, 1251, 1252, 1254, 1256, 1258, 1260, 1261, 1263, 1265, 1267, 1269, 1271, 1272, 1274, 1276, 1278, 1280, 1281, 1283, 1285, 1287, 1289, 1291, 1292, 1294, 1296, 1298, 1300, 1302, 1303, 1305, 1307, 1309, 1311, 1312, 1314, 1316, 1318, 1320, 1322, 1323, 1325, 1327, 1329, 1331, 1332, 1334, 1336, 1338, 1340, 1342, 1343, 1345, 1347, 1349, 1351, 1352, 1354, 1356, 1358, 1360, 1362, 1363, 1365, 1367, 1369, 1371, 1372, 1374, 1376, 1378, 1380, 1382, 1383, 1385, 1387, 1389, 1391, 1392, 1394, 1396, 1398, 1400, 1402, 1403, 1405, 1407, 1409, 1411, 1412, 1414, 1416, 1418, 1420, 1422, 1423, 1425, 1427, 1429, 1431, 1432, 1434, 1436, 1438, 1440, 1442, 1443, 1445, 1447, 1449, 1451, 1452, 1454, 1456, 1458, 1460, 1462, 1463, 1465, 1467, 1469, 1471, 1472, 1474, 1476, 1478, 1480, 1482, 1483, 1485, 1487, 1489, 1491, 1492, 1494, 1496, 1498, 1500, 1502]
# Plot the actual data
plt.plot(times, list_ppm, ".", label="Data");

# The actual curve fitting happens here
optimizedParameters, pcov = opt.curve_fit(func, times, list_ppm, maxfev = 8000);

# Use the optimized parameters to plot the best fit
plt.plot(times, func(times, *optimizedParameters), label="fit");

# Show the graph
plt.legend();
plt.show();

import matplotlib.pyplot as plt;
import numpy as np;
import scipy.optimize as opt;

# This is the function we are trying to fit to the data.
def func(x, a, b, c):
     return a * np.exp(-b * x) + c
ydata = [1086, 1089, 1092, 1094, 1095, 1096, 1098, 1100, 1102, 1104, 1107, 1110, 1112, 1111, 1115, 1117, 1118, 1119, 1120, 1121, 1120, 1123, 1124, 1126, 1128, 1128, 1129, 1131, 1134, 1136, 1136, 1138, 1140, 1141, 1142, 1142, 1143, 1145, 1145, 1147, 1147, 1148, 1150, 1151, 1152, 1152, 1153, 1152, 1154, 1154, 1155, 1156, 1157, 1157, 1159, 1160, 1161, 1161, 1161, 1162, 1163, 1165, 1166, 1166, 1169, 1169, 1169, 1170, 1169, 1170, 1170, 1172, 1173, 1174, 1173, 1173, 1175, 1176, 1178, 1182, 1186, 1186, 1186, 1187, 1187, 1188, 1190, 1192, 1193, 1194, 1197, 1198, 1198, 1199, 1199, 1199, 1200, 1202, 1203, 1206, 1208, 1210, 1210, 1211, 1212, 1212, 1210, 1212, 1212, 1213, 1216, 1216, 1218, 1220, 1223, 1225, 1228, 1232, 1236, 1239, 1249, 1255, 1261, 1265, 1270, 1271, 1276, 1276, 1278, 1278, 1279, 1280, 1281, 1282, 1285, 1288, 1292, 1297, 1300, 1305, 1309, 1308, 1312, 1312, 1314, 1315, 1317, 1320, 1322, 1322, 1322, 1322, 1322, 1320, 1320, 1322, 1322, 1322, 1321, 1329, 1335, 1340, 1348, 1351, 1346, 1349, 1352, 1352, 1353, 1355, 1358, 1358, 1363, 1364, 1367, 1369, 1369, 1373, 1376, 1379, 1382, 1383, 1387, 1390, 1392, 1392, 1394, 1396, 1396, 1398, 1399, 1400, 1401, 1403, 1405, 1405, 1405, 1406, 1408, 1406, 1407, 1407, 1407, 1407, 1408, 1407, 1406, 1407, 1407, 1406, 1406, 1408, 1408, 1406, 1406, 1406, 1406, 1405, 1405, 1405, 1405, 1406, 1406, 1406, 1407, 1408, 1410, 1410, 1412, 1414, 1415, 1415, 1416, 1418, 1419, 1420, 1421, 1421, 1423, 1426, 1427, 1428, 1429, 1431, 1431, 1431, 1432, 1432, 1431, 1432, 1433, 1434, 1434, 1435, 1436, 1436, 1436, 1437, 1437, 1436, 1439, 1437, 1437, 1436, 1435, 1435, 1436, 1436, 1438, 1438, 1439, 1437, 1436, 1434, 1435, 1436, 1435, 1435, 1434, 1434, 1434, 1434, 1434, 1434, 1435, 1435, 1434, 1436, 1437, 1438, 1440, 1443, 1444, 1446, 1451, 1459, 1460, 1468, 1472, 1478, 1478, 1481, 1485, 1488, 1490, 1492, 1494, 1495, 1494, 1496, 1497, 1498, 1500, 1503, 1507, 1511, 1517, 1527, 1542, 1555, 1560, 1561, 1569, 1573, 1573, 1574, 1575, 1576, 1576, 1575, 1573, 1571, 1571, 1570, 1570, 1570, 1571, 1572, 1574, 1570, 1571, 1571, 1573, 1572, 1571, 1570, 1569, 1569, 1568, 1568, 1568, 1568, 1567, 1567, 1567, 1567, 1568, 1569, 1570, 1571, 1571, 1573, 1573, 1573, 1574, 1574, 1573, 1573, 1572, 1573, 1573, 1572, 1573, 1572, 1573, 1575, 1575, 1576, 1577, 1578, 1579, 1580, 1581, 1582, 1584, 1588, 1592, 1593, 1595, 1596, 1601, 1611, 1617, 1624, 1625, 1634, 1637, 1641, 1644, 1648, 1651, 1651, 1654, 1656, 1659, 1660, 1664, 1664, 1666, 1664, 1665, 1665, 1668, 1668, 1668, 1668, 1667, 1668, 1669, 1671, 1671, 1672, 1671, 1672, 1674, 1676, 1678, 1678, 1681, 1681, 1682, 1683, 1684, 1684, 1683, 1684, 1683, 1682, 1683, 1683, 1683, 1681, 1680, 1678, 1677, 1677, 1675, 1673, 1671, 1671, 1669, 1668, 1667, 1665, 1664, 1662, 1662, 1661, 1660, 1661, 1662, 1660, 1659, 1660, 1660, 1662, 1663, 1664, 1666, 1665, 1665, 1665, 1666, 1665, 1666, 1664, 1665, 1666, 1669, 1671, 1674, 1677, 1681, 1685, 1689, 1692, 1695, 1696, 1698, 1700, 1701, 1701, 1702, 1702, 1704, 1704, 1705, 1707, 1708, 1710, 1710, 1712, 1712, 1711, 1713, 1713, 1714, 1713, 1713, 1715, 1716, 1717, 1716, 1716, 1716, 1717, 1717, 1718, 1720, 1721, 1722, 1723, 1725, 1727, 1730, 1735, 1741, 1746, 1746, 1746, 1748, 1747, 1747, 1747, 1746, 1744, 1746, 1746, 1745, 1746, 1746, 1746, 1747, 1746, 1747, 1747, 1750, 1751, 1753, 1754]
xdata =    [503, 504, 506, 508, 510,      512, 513, 515, 517, 519,      521, 523, 524, 526, 528,      530, 532, 533, 535, 537, 539, 541, 543, 544, 546, 548, 550, 552, 553, 555, 557, 559, 561, 563, 564, 566, 568, 570, 572, 573, 575, 577, 579, 581, 583, 584, 586, 588, 590, 592, 593, 595, 597, 599, 601, 603, 604, 606, 608, 610, 612, 613, 615, 617, 619, 621, 623, 624, 626, 628, 630, 632, 633, 635, 637, 639, 641, 643, 644, 646, 648, 650, 652, 653, 655, 657, 659, 661, 663, 664, 666, 668, 670, 672, 674, 675, 677, 679, 681, 683, 684, 686, 688, 690, 692, 694, 695, 697, 699, 701, 703, 704, 706, 708, 710, 712, 714, 715, 717, 719, 721, 723, 724, 726, 728, 730, 732, 734, 735, 737, 739, 741, 743, 744, 746, 748, 750, 752, 754, 755, 757, 759, 761, 763, 764, 766, 768, 770, 772, 774, 775, 777, 779, 781, 783, 784, 786, 788, 790, 792, 794, 795, 797, 799, 801, 803, 804, 806, 808, 810, 812, 814, 815, 817, 819, 821, 823, 824, 826, 828, 830, 832, 834, 835, 837, 839, 841, 843, 844, 846, 848, 850, 852, 854, 855, 857, 859, 861, 863, 864, 866, 868, 870, 872, 874, 875, 877, 879, 881, 883, 885, 886, 888, 890, 892, 894, 895, 897, 899, 901, 903, 905, 906, 908, 910, 912, 914, 915, 917, 919, 921, 923, 925, 926, 928, 930, 932, 934, 935, 937, 939, 941, 943, 945, 946, 948, 950, 952, 954, 955, 957, 959, 961, 963, 965, 966, 968, 970, 972, 974, 975, 977, 979, 981, 983, 985, 986, 988, 990, 992, 994, 995, 997, 999, 1000, 1002, 1004, 1006, 1008, 1010, 1012, 1014, 1016, 1018, 1020, 1020, 1022, 1025, 1027, 1029, 1030, 1032, 1034, 1036, 1038, 1040, 1041, 1043, 1045, 1047, 1049, 1050, 1052, 1054, 1056, 1058, 1060, 1061, 1063, 1065, 1067, 1069, 1070, 1072, 1074, 1076, 1078, 1080, 1081, 1083, 1085, 1087, 1089, 1090, 1092, 1094, 1096, 1098, 1100, 1101, 1103, 1105, 1107, 1109, 1111, 1112, 1114, 1116, 1118, 1120, 1121, 1123, 1125, 1127, 1129, 1131, 1132, 1134, 1136, 1138, 1140, 1141, 1143, 1145, 1147, 1149, 1151, 1152, 1154, 1156, 1158, 1160, 1161, 1163, 1165, 1167, 1169, 1171, 1172, 1174, 1176, 1178, 1180, 1181, 1183, 1185, 1187, 1189, 1191, 1192, 1194, 1196, 1198, 1200, 1201, 1203, 1205, 1207, 1209, 1211, 1212, 1214, 1216, 1218, 1220, 1221, 1223, 1225, 1227, 1229, 1231, 1232, 1234, 1236, 1238, 1240, 1241, 1243, 1245, 1247, 1249, 1251, 1252, 1254, 1256, 1258, 1260, 1261, 1263, 1265, 1267, 1269, 1271, 1272, 1274, 1276, 1278, 1280, 1281, 1283, 1285, 1287, 1289, 1291, 1292, 1294, 1296, 1298, 1300, 1302, 1303, 1305, 1307, 1309, 1311, 1312, 1314, 1316, 1318, 1320, 1322, 1323, 1325, 1327, 1329, 1331, 1332, 1334, 1336, 1338, 1340, 1342, 1343, 1345, 1347, 1349, 1351, 1352, 1354, 1356, 1358, 1360, 1362, 1363, 1365, 1367, 1369, 1371, 1372, 1374, 1376, 1378, 1380, 1382, 1383, 1385, 1387, 1389, 1391, 1392, 1394, 1396, 1398, 1400, 1402, 1403, 1405, 1407, 1409, 1411, 1412, 1414, 1416, 1418, 1420, 1422, 1423, 1425, 1427, 1429, 1431, 1432, 1434, 1436, 1438, 1440, 1442, 1443, 1445, 1447, 1449, 1451, 1452, 1454, 1456, 1458, 1460, 1462, 1463, 1465, 1467, 1469, 1471, 1472, 1474, 1476, 1478, 1480, 1482, 1483, 1485, 1487, 1489, 1491, 1492, 1494, 1496, 1498, 1500, 1502]
# Generate some data, you don't have to do this, as you already have your data

#xdata = np.linspace(0, 4, 50)
#y = func(xdata, 2.5, 1.3, 0.5)
#y_noise = 0.2 * np.random.normal(size=xdata.size)
#ydata = y + y_noise

# Plot the actual data
plt.plot(xdata, ydata, ".", label="Data");

# The actual curve fitting happens here
optimizedParameters, pcov = opt.curve_fit(func, xdata, ydata);
print(optimizedParameters, pcov)
# Use the optimized parameters to plot the best fit
print(func)
#plt.plot(xdata, func(xdata, *optimizedParameters), label="fit");

# Show the graph
plt.legend();
plt.show();
"""